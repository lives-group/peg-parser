#lang racket

(module reader racket
  
(require "../grammar.rkt"
         "../peg-ast.rkt"
         "../peg-wf.rkt"
         racket/path
         racket/syntax
         )



(provide (rename-out [peg-read read]
                     [peg-read-syntax read-syntax]))

(define (peg-read in)
  (syntax->datum
   (peg-read-syntax #f in)))

(define (msg-loops l)
     (string-append "The following non-terminals are left-recursive: "
                           (string-join l ", ") )
  )
(define (msg-ty-erros l)
  (string-append "The following expressions do not type: "
                 (string-join (map pe->err-string l) "\n")))

(define (error-msgs pl)
  (match pl
    [(TyErr '() ty) (error (msg-ty-erros ty))]
    [(TyErr lp '()) (error (msg-loops lp))]
    [(TyErr lp ty) (error (string-append (msg-loops lp) "\n" (msg-ty-erros ty)))])
  
  )

(define parse-base-name "parse")


(define (prefix-from-file pth)
  (string->symbol (string-append (path->string (file-name-from-path (path-replace-extension pth #""))) ":") ))

(define (peg-read-syntax path port)
  (define grammar (parse port))
  (let ([types (infer-types grammar)]
        [fname (prefix-from-file path)] )
    (datum->syntax
     #f
     `(module peg-parser racket
         (require "../peg-wf.rkt")        
        ,(displayln `"---- Constraint List ----" )
        ,(displayln (Ctx-clist types)  )
        ,(displayln `"----Unsolved Nts ----" )
        ,(displayln (unsolved-nts  types))
        ,(displayln `"----Type Env ----" )
        ,(displayln (ctx-tyEnv-toString  types))
        ))))
  )